#!/usr/bin/env node

const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

// Tailles d'ic√¥nes requises pour Chrome
const iconSizes = [16, 48, 128];

// Chemins
const svgPath = path.join(__dirname, '../icons/icon.svg');
const iconsDir = path.join(__dirname, '../icons');

console.log('üé® G√©n√©ration des ic√¥nes PNG √† partir du SVG...');

// V√©rifier que le fichier SVG existe
if (!fs.existsSync(svgPath)) {
    console.error('‚ùå Fichier SVG non trouv√©:', svgPath);
    process.exit(1);
}

// G√©n√©rer les ic√¥nes PNG
async function generateIcons() {
    try {
        const svgBuffer = fs.readFileSync(svgPath);
        
        for (const size of iconSizes) {
            const outputPath = path.join(iconsDir, `icon${size}.png`);
            
            await sharp(svgBuffer)
                .resize(size, size)
                .png()
                .toFile(outputPath);
            
            console.log(`‚úÖ Ic√¥ne g√©n√©r√©e: icon${size}.png (${size}x${size})`);
        }
        
        console.log('üéâ Toutes les ic√¥nes ont √©t√© g√©n√©r√©es avec succ√®s !');
        
        // Mettre √† jour le manifest pour utiliser les PNG
        updateManifest();
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la g√©n√©ration des ic√¥nes:', error);
        process.exit(1);
    }
}

// Mettre √† jour le manifest.json pour utiliser les PNG
function updateManifest() {
    const manifestPath = path.join(__dirname, '../manifest.json');
    
    try {
        const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
        
        // Mettre √† jour les ic√¥nes
        manifest.icons = {
            "16": "icons/icon16.png",
            "48": "icons/icon48.png",
            "128": "icons/icon128.png"
        };
        
        fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
        console.log('üìù Manifest.json mis √† jour avec les ic√¥nes PNG');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la mise √† jour du manifest:', error);
    }
}

// Ex√©cuter la g√©n√©ration
generateIcons();
